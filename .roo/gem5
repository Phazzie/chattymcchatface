import * as vscode from 'vscode';
import * as fs from 'fs/promises'; // Use promises API
import * as os from 'os';
import * as path from 'path';
import { FileService } from '../../fileSharing/fileService'; // Adjust path

// --- Mocks ---
jest.mock('fs/promises'); // Mock the entire fs/promises module
jest.mock('vscode', () => ({
    window: {
        showOpenDialog: jest.fn(),
        showSaveDialog: jest.fn(),
    },
    Uri: {
        file: jest.fn((filePath) => ({ fsPath: filePath, path: filePath, scheme: 'file' })), // Mock Uri.file
        parse: jest.fn(), // Mock Uri.parse if needed
    },
    // Add other mocks if FileService uses more vscode APIs
}), { virtual: true });

const mockFs = fs as jest.Mocked<typeof fs>;
const mockVscodeWindow = vscode.window as jest.Mocked<typeof vscode.window>;
const mockVscodeUri = vscode.Uri as jest.Mocked<typeof vscode.Uri>;

describe('FileService', () => {
    let fileService: FileService;
    let tempFilePath: string;
    let tempDirPath: string;

    beforeEach(async () => {
        jest.clearAllMocks();
        fileService = new FileService();

        // Create a temporary directory for mock file operations
        tempDirPath = await fs.mkdtemp(path.join(os.tmpdir(), 'chatty-test-'));
        tempFilePath = path.join(tempDirPath, 'test-file.dat');

        // Mock Uri.file to return objects with fsPath
        mockVscodeUri.file.mockImplementation((p) => ({
            fsPath: p,
            path: p.startsWith('/') ? p : `/${p.replace(/\/g, '/')}`, // Basic path normalization
            scheme: 'file',
            with: jest.fn(),
            toString: jest.fn(() => `file://${p}`)
        } as any));
    });

    afterEach(async () => {
        // Clean up temporary directory
        await fs.rm(tempDirPath, { recursive: true, force: true });
    });

    describe('selectFileToSend', () => {
        it('should return the selected file path if user selects one file', async () => {
            const selectedUri = vscode.Uri.file(tempFilePath);
            mockVscodeWindow.showOpenDialog.mockResolvedValue([selectedUri]);

            const result = await fileService.selectFileToSend();

            expect(mockVscodeWindow.showOpenDialog).toHaveBeenCalledTimes(1);
            expect(mockVscodeWindow.showOpenDialog).toHaveBeenCalledWith({
                canSelectFiles: true,
                canSelectFolders: false,
                canSelectMany: false, // Ensure only one file
                openLabel: 'Select File to Send',
            });
            expect(result).toEqual({
                filePath: tempFilePath,
                fileName: 'test-file.dat',
            });
        });

        it('should return null if user cancels dialog', async () => {
            mockVscodeWindow.showOpenDialog.mockResolvedValue(undefined);
            const result = await fileService.selectFileToSend();
            expect(result).toBeNull();
        });

        it('should return null if user selects no files (should not happen with canSelectMany: false)', async () => {
            mockVscodeWindow.showOpenDialog.mockResolvedValue([]);
            const result = await fileService.selectFileToSend();
            expect(result).toBeNull();
        });
    });

    describe('selectSaveLocation', () => {
        const suggestedFileName = 'received-file.txt';

        it('should return the selected save path if user confirms', async () => {
            const saveUri = vscode.Uri.file(path.join(tempDirPath, suggestedFileName));
            mockVscodeWindow.showSaveDialog.mockResolvedValue(saveUri);

            const result = await fileService.selectSaveLocation(suggestedFileName);

            expect(mockVscodeWindow.showSaveDialog).toHaveBeenCalledTimes(1);
            expect(mockVscodeWindow.showSaveDialog).toHaveBeenCalledWith({
                saveLabel: 'Save Received File',
                defaultUri: expect.objectContaining({
                    fsPath: expect.stringContaining(suggestedFileName) // Check suggested name is used
                }),
            });
            expect(result).toBe(saveUri.fsPath);
        });

        it('should return null if user cancels dialog', async () => {
            mockVscodeWindow.showSaveDialog.mockResolvedValue(undefined);
            const result = await fileService.selectSaveLocation(suggestedFileName);
            expect(result).toBeNull();
        });
    });

    describe('readFileChunk', () => {
        const chunkSize = 1024;
        const fileContent = 'A'.repeat(chunkSize * 2.5); // 2.5 chunks worth of data

        beforeEach(async () => {
            // Write mock file content before reading tests
            await fs.writeFile(tempFilePath, fileContent);
            // Mock fs.open and filehandle methods
            const mockFileHandle: jest.Mocked<fs.FileHandle> = {
                read: jest.fn(),
                close: jest.fn().mockResolvedValue(undefined),
                // Mock other methods if needed
            } as any;
            mockFs.open.mockResolvedValue(mockFileHandle);

            // Simulate reading chunks
            let bytesRead = 0;
            mockFileHandle.read.mockImplementation(async (buffer, offset, length, position) => {
                const start = position ?? bytesRead;
                const end = Math.min(start + length, fileContent.length);
                const chunkStr = fileContent.substring(start, end);
                const actualBytesRead = Buffer.from(chunkStr).copy(buffer, offset);
                bytesRead = end; // Update position for next read simulation
                return { bytesRead: actualBytesRead, buffer };
            });
        });

        it('should read the correct chunk of data', async () => {
            const chunk = await fileService.readFileChunk(tempFilePath, 1, chunkSize); // Read chunk index 1 (second chunk)
            expect(mockFs.open).toHaveBeenCalledWith(tempFilePath, 'r');
            expect(mockFs.open.mock.results[0].value.read).toHaveBeenCalledWith(
                expect.any(Buffer), // Buffer to read into
                0,                // Offset in buffer
                chunkSize,        // Length to read
                chunkSize * 1     // Position in file (start of chunk 1)
            );
            expect(chunk?.toString()).toBe('A'.repeat(chunkSize));
            expect(mockFs.open.mock.results[0].value.close).toHaveBeenCalled(); // Ensure file is closed
        });

        it('should read the last partial chunk correctly', async () => {
            const chunk = await fileService.readFileChunk(tempFilePath, 2, chunkSize); // Read chunk index 2 (last chunk)
            expect(mockFs.open.mock.results[0].value.read).toHaveBeenCalledWith(
                expect.any(Buffer), 0, chunkSize, chunkSize * 2
            );
            expect(chunk?.toString()).toBe('A'.repeat(chunkSize * 0.5));
            expect(mockFs.open.mock.results[0].value.close).toHaveBeenCalled();
        });

        it('should return null for chunk index out of bounds', async () => {
            const chunk = await fileService.readFileChunk(tempFilePath, 3, chunkSize); // Index 3 is out of bounds
            expect(chunk).toBeNull();
            // Should still open/close the file to check size potentially
            expect(mockFs.open).toHaveBeenCalled();
            expect(mockFs.open.mock.results[0].value.read).not.toHaveBeenCalled(); // No read attempt
            expect(mockFs.open.mock.results[0].value.close).toHaveBeenCalled();
        });

        it('should handle file open errors', async () => {
            mockFs.open.mockRejectedValueOnce(new Error('Permission denied'));
            await expect(fileService.readFileChunk(tempFilePath, 0, chunkSize))
                .rejects.toThrow('Permission denied');
        });

        it('should handle file read errors', async () => {
            const mockFileHandle = mockFs.open.mock.results[0].value as jest.Mocked<fs.FileHandle>;
            mockFileHandle.read.mockRejectedValueOnce(new Error('Read error'));
            await expect(fileService.readFileChunk(tempFilePath, 0, chunkSize))
                .rejects.toThrow('Read error');
            expect(mockFileHandle.close).toHaveBeenCalled(); // Ensure close is still called on error
        });
    });

    describe('writeFileChunk', () => {
        const chunkData = Buffer.from('chunk data');
        const chunkIndex = 0;

        it('should write the chunk data to the correct position', async () => {
            const mockFileHandle: jest.Mocked<fs.FileHandle> = {
                write: jest.fn().mockResolvedValue({ bytesWritten: chunkData.length, buffer: chunkData }),
                close: jest.fn().mockResolvedValue(undefined),
            } as any;
            mockFs.open.mockResolvedValue(mockFileHandle);

            await fileService.writeFileChunk(tempFilePath, chunkIndex, 1024, chunkData);

            expect(mockFs.open).toHaveBeenCalledWith(tempFilePath, 'a'); // Open in append mode (or 'r+' if needing specific positions) - 'a' is simpler if writing sequentially
            expect(mockFileHandle.write).toHaveBeenCalledWith(chunkData, 0, chunkData.length, chunkIndex * 1024);
            expect(mockFileHandle.close).toHaveBeenCalled();
        });

        it('should handle file open errors', async () => {
            mockFs.open.mockRejectedValueOnce(new Error('Disk full'));
            await expect(fileService.writeFileChunk(tempFilePath, chunkIndex, 1024, chunkData))
                .rejects.toThrow('Disk full');
        });

        it('should handle file write errors', async () => {
            const mockFileHandle = {
                write: jest.fn().mockRejectedValue(new Error('Write failed')),
                close: jest.fn().mockResolvedValue(undefined),
            } as any;
            mockFs.open.mockResolvedValue(mockFileHandle);

            await expect(fileService.writeFileChunk(tempFilePath, chunkIndex, 1024, chunkData))
                .rejects.toThrow('Write failed');
            expect(mockFileHandle.close).toHaveBeenCalled(); // Ensure close on error
        });
    });

    describe('getFileSize', () => {
        it('should return the correct file size', async () => {
            const stats = { size: 5678 } as fs.Stats;
            mockFs.stat.mockResolvedValue(stats);

            const size = await fileService.getFileSize(tempFilePath);

            expect(mockFs.stat).toHaveBeenCalledWith(tempFilePath);
            expect(size).toBe(5678);
        });

        it('should throw error if file does not exist', async () => {
            const error = new Error('File not found');
            (error as any).code = 'ENOENT';
            mockFs.stat.mockRejectedValue(error);

            await expect(fileService.getFileSize(tempFilePath))
                .rejects.toThrow('File not found');
        });
    });
});
